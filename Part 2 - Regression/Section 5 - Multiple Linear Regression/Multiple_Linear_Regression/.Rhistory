print("Hello World")
setwd("~/Desktop/ML/Machine Learning A-Z/Part 1 - Data Preprocessing")
dataset = read.csv('Data.csv')
View(dataset)
View(dataset)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
dataset$Country = factor(dataset$Country, levels = c('France', 'Spain', 'Germany'), labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased, levels = c('Yes', 'No'), labels = c(1, 0))
View(dataset)
View(dataset)
dataset = read.csv('Data.csv')
# Taking care of missing data
# taking column age, 'is.na' tells if a value is missing
# mean is an inbuilt function. na.rm = TRUE includes x even if value is na
# third parameter is the else part of the program (what to do if value is not missing)
dataset$Age = ifelse(is.na(dataset$Age),
ave(dataset$Age, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Age)
# taking cloumn salary
dataset$Salary = ifelse(is.na(dataset$Salary),
ave(dataset$Salary, FUN = function(x) mean(x, na.rm = TRUE)),
dataset$Salary)
# Encoding categorical data
# we don't categorize it like in python because r works
dataset$Country = factor(dataset$Country, levels = c('France', 'Spain', 'Germany'), labels = c(1, 2, 3))
dataset$Purchased = factor(dataset$Purchased, levels = c('Yes', 'No'), labels = c(1, 0))
# Splitting the dataset into the Training set and Test set
# run this once to install the package => install.packages('caTools')
# to use the library run => library(caTools)
# set.seed is like random_state in python
library(caTools)
set.seed(123)
split
split = sample.split(dataset$Purchased, SplitRatio = 0.8)
split
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
training_set
test_set
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
training_set[, 2:3] = scale(training_set[, 2:3])
test_set[, 2:3] = subset(test_set[, 2:3])
View(dataset)
dataset = read.csv(Salary_Data.csv)
dataset = read.csv('Salary_Data.csv')
setwd("~/Desktop/ML/Machine Learning A-Z/Part 2 - Regression/Section 4 - Simple Linear Regression")
dataset = read.csv('Salary_Data.csv')
dataset = read.csv('Salary_Data.csv')
View(dataset)
View(dataset)
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split = TRUE)
test_set = subset(dataset, split = FALSE)
View(training_set)
View(training_set)
View(test_set)
View(test_set)
regressor = lm(formula = Salary ~ YearsExperience
data = training_set)
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(test_set)
install.packages('ggplug2')
install.packages('ggplot2')
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.4/Resources/library")
detach("package:ggplot2", unload=TRUE)
library(ggplot2)
library(ggplot2)
ggplot() +
# plot observation points
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# since we want to take predicted salaries, y cannot be of training_set
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
# Simple Linear Regression
# Importing the dataset
dataset = read.csv('Salary_Data.csv')
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting Simple Linear Regression to the Training set
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
# Predicting the Test set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training set results
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Visualising the Test set results
library(ggplot2)
ggplot() +
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test set)') +
xlab('Years of experience') +
ylab('Salary')
library(ggplot2)
ggplot() +
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training set)') +
xlab('Years of experience') +
ylab('Salary')
# Simple Linear Regression
# Importing DataSet
dataset = read.csv('Salary_Data.csv')
# Splitting dataset into training set and test set
library(caTools)
set.seed(123)
split = sample.split(dataset$Salary, SplitRatio = 2/3)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
# We don't need feature scaling here as simple linear regression in R takes care of it.
# Fitting simple linear regression to Training Set
# Salary ~ YearsExperience means Salary is proportional to YearsExperience
regressor = lm(formula = Salary ~ YearsExperience,
data = training_set)
# To get some information about simple linear model, in console type summary(regressor)
# In the summary, in coefficients, if there are no stars, it means no statistical significance. If there are 3 stars, it means that the model has high statistical significance
# P value is another indicator of statistical significance. Lower the p value, the higher the impact of independent variable on the dependent variable. Usually, if p value is lower than 5%, the independent variable is highly significant. Anything lower is less significant.
# Predicting Test Set results
y_pred = predict(regressor, newdata = test_set)
# Visualising the Training Set results
# install.packages('ggplot2')
library(ggplot2)
ggplot() +
# plot observation points
geom_point(aes(x = training_set$YearsExperience, y = training_set$Salary),
colour = 'red') +
# since we want to take predicted salaries, y cannot be of training_set
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Training Set)') +
xlab('Years of Experience') +
ylab('Salary')
ggplot() +
# plot observation points
geom_point(aes(x = test_set$YearsExperience, y = test_set$Salary),
colour = 'red') +
# since we want to take predicted salaries, y cannot be of training_set
geom_line(aes(x = training_set$YearsExperience, y = predict(regressor, newdata = training_set)),
colour = 'blue') +
ggtitle('Salary vs Experience (Test Set)') +
xlab('Years of Experience') +
ylab('Salary')
View(test_set)
View(dataset)
setwd("~/Desktop/ML/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression")
setwd("~/Desktop/ML/Machine Learning A-Z/Part 2 - Regression/Section 5 - Multiple Linear Regression/Multiple_Linear_Regression")
dataset = read.csv('50_Startups.csv')
dataset = read.csv('50_Startups.csv')
View(dataset)
dataset = read.csv('50_Startups.csv')
# Encoding categorical data
dataset$State = factor(dataset$State,
levels = c('New York', 'California', 'Florida'),
labels = c(1, 2, 3))
# Splitting the dataset into the Training set and Test set
# install.packages('caTools')
library(caTools)
set.seed(123)
split = sample.split(dataset$Profit, SplitRatio = 0.8)
training_set = subset(dataset, split == TRUE)
test_set = subset(dataset, split == FALSE)
View(test_set)
View(test_set)
View(training_set)
View(training_set)
View(dataset)
View(dataset)
regressor = lm(formul = Profit ~ .,
data = training_set)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = training_set)
summary(regressor)
y_pred = predict(regressor, newdata = test_set)
y_pred
View(test_set)
View(test_set)
regressor = lm(formula = Profit ~ ., data = training_set)
y_pred = predict(regressor, newdata = test_set)
y_pred
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend + State,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Administration + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend + Marketing.Spend,
data = dataset)
summary(regressor)
regressor = lm(formula = Profit ~ R.D.Spend,
data = dataset)
summary(regressor)
